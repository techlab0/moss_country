'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import type { BlogPost } from '@/types/sanity';

interface AdminBlogPost extends BlogPost {
  _createdAt?: string;
  _updatedAt?: string;
}

export default function AdminBlogPage() {
  const [posts, setPosts] = useState<AdminBlogPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<string>('all');

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    try {
      const response = await fetch('/api/admin/blog');
      if (!response.ok) {
        throw new Error('Failed to fetch posts');
      }
      const postsData = await response.json();
      setPosts(postsData);
      setLoading(false);
    } catch (error) {
      console.error('„Éñ„É≠„Ç∞Ë®ò‰∫ã„ÅÆÂèñÂæó„Å´Â§±Êïó:', error);
      setLoading(false);
    }
  };

  const handleDelete = async (postId: string) => {
    if (!confirm('„Åì„ÅÆË®ò‰∫ã„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) return;
    
    try {
      const response = await fetch(`/api/admin/blog/${postId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Failed to delete post');
      }
      
      // „É™„Çπ„Éà„Åã„ÇâÂâäÈô§
      setPosts(posts.filter(post => post._id !== postId));
    } catch (error) {
      console.error('Ë®ò‰∫ã„ÅÆÂâäÈô§„Å´Â§±Êïó:', error);
      alert('Ë®ò‰∫ã„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  const handleTogglePublish = async (postId: string, currentStatus: boolean) => {
    try {
      const action = currentStatus ? 'unpublish' : 'publish';
      const response = await fetch(`/api/admin/blog/${postId}/publish`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to update publish status');
      }
      
      const updatedPost = await response.json();
      
      // „É™„Çπ„Éà„ÇíÊõ¥Êñ∞
      setPosts(posts.map(post => 
        post._id === postId 
          ? { ...post, isPublished: updatedPost.isPublished, publishedAt: updatedPost.publishedAt }
          : post
      ));
    } catch (error) {
      console.error('ÂÖ¨ÈñãÁä∂ÊÖã„ÅÆÂ§âÊõ¥„Å´Â§±Êïó:', error);
      alert('ÂÖ¨ÈñãÁä∂ÊÖã„ÅÆÂ§âÊõ¥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  const getCategoryConfig = (category: string) => {
    switch (category) {
      case 'news':
        return { label: '„ÅäÁü•„Çâ„Åõ', color: 'bg-green-100 text-green-800' };
      case 'howto':
        return { label: '„ÉÜ„É©„É™„Ç¶„É†„ÅÆ‰Ωú„ÇäÊñπ', color: 'bg-blue-100 text-blue-800' };
      case 'plants':
        return { label: 'Ê§çÁâ©„Å´„Å§„ÅÑ„Å¶', color: 'bg-green-100 text-green-800' };
      case 'maintenance':
        return { label: '„É°„É≥„ÉÜ„Éä„É≥„Çπ', color: 'bg-orange-100 text-orange-800' };
      case 'events':
        return { label: '„Ç§„Éô„É≥„Éà', color: 'bg-purple-100 text-purple-800' };
      case 'other':
        return { label: '„Åù„ÅÆ‰ªñ', color: 'bg-gray-100 text-gray-800' };
      default:
        return { label: 'Êú™ÂàÜÈ°û', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const getStatusConfig = (isPublished: boolean) => {
    return isPublished 
      ? { label: 'ÂÖ¨Èñã‰∏≠', color: 'bg-green-100 text-green-800' }
      : { label: '‰∏ãÊõ∏„Åç', color: 'bg-yellow-100 text-yellow-800' };
  };

  const filteredPosts = posts.filter(post => {
    if (filter === 'all') return true;
    if (filter === 'published') return post.isPublished;
    if (filter === 'draft') return !post.isPublished;
    return post.category === filter;
  });

  if (loading) {
    return (
      <div className="animate-pulse space-y-4">
        <div className="h-8 bg-gray-200 rounded w-48"></div>
        <div className="h-96 bg-gray-200 rounded"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">„Éñ„É≠„Ç∞„Éª„Éã„É•„Éº„ÇπÁÆ°ÁêÜ</h1>
          <p className="text-gray-600 mt-2">Ë®ò‰∫ã„ÅÆ‰ΩúÊàê„ÉªÁ∑®ÈõÜ„ÉªÂÖ¨ÈñãÁÆ°ÁêÜ</p>
        </div>
        <div className="flex space-x-3">
          <Link
            href="/admin/blog/new"
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-moss-green hover:bg-moss-green/90"
          >
            üìù Êñ∞Ë®ò‰∫ã‰ΩúÊàê
          </Link>
          <button
            onClick={() => window.location.reload()}
            className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            üîÑ Êõ¥Êñ∞
          </button>
        </div>
      </div>

      {/* „Éï„Ç£„É´„Çø„Éº */}
      <div className="flex space-x-2">
        <button
          onClick={() => setFilter('all')}
          className={`px-4 py-2 text-sm font-medium rounded-md ${
            filter === 'all'
              ? 'bg-moss-green text-white'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          „Åô„Åπ„Å¶ ({posts.length})
        </button>
        <button
          onClick={() => setFilter('news')}
          className={`px-4 py-2 text-sm font-medium rounded-md ${
            filter === 'news'
              ? 'bg-moss-green text-white'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          „ÅäÁü•„Çâ„Åõ ({posts.filter(p => p.category === 'news').length})
        </button>
        <button
          onClick={() => setFilter('howto')}
          className={`px-4 py-2 text-sm font-medium rounded-md ${
            filter === 'howto'
              ? 'bg-moss-green text-white'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          ‰Ωú„ÇäÊñπ ({posts.filter(p => p.category === 'howto').length})
        </button>
        <button
          onClick={() => setFilter('published')}
          className={`px-4 py-2 text-sm font-medium rounded-md ${
            filter === 'published'
              ? 'bg-moss-green text-white'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          ÂÖ¨Èñã‰∏≠ ({posts.filter(p => p.isPublished).length})
        </button>
        <button
          onClick={() => setFilter('draft')}
          className={`px-4 py-2 text-sm font-medium rounded-md ${
            filter === 'draft'
              ? 'bg-moss-green text-white'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          ‰∏ãÊõ∏„Åç ({posts.filter(p => !p.isPublished).length})
        </button>
      </div>

      {/* Ë®ò‰∫ã‰∏ÄË¶ß */}
      <div className="bg-white shadow rounded-lg">
        <div className="px-6 py-4 border-b">
          <h2 className="text-lg font-medium">Ë®ò‰∫ã‰∏ÄË¶ß</h2>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  „Çø„Ç§„Éà„É´
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  „Ç´„ÉÜ„Ç¥„É™
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  „Çπ„ÉÜ„Éº„Çø„Çπ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÊäïÁ®øÊó•
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  „Çø„Ç∞
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Êìç‰Ωú
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredPosts.map((post) => {
                const categoryConfig = getCategoryConfig(post.category);
                const statusConfig = getStatusConfig(post.isPublished);
                
                return (
                  <tr key={post._id} className="hover:bg-gray-50">
                    <td className="px-6 py-4">
                      <div>
                        <div className="text-sm font-medium text-gray-900 mb-1">
                          {post.title}
                        </div>
                        <div className="text-sm text-gray-500">
                          {post.excerpt}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${categoryConfig.color}`}>
                        {categoryConfig.label}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-2">
                        <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${statusConfig.color}`}>
                          {statusConfig.label}
                        </span>
                        <button
                          onClick={() => handleTogglePublish(post._id, post.isPublished)}
                          className={`px-2 py-1 text-xs rounded ${
                            post.isPublished 
                              ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200' 
                              : 'bg-green-100 text-green-800 hover:bg-green-200'
                          }`}
                        >
                          {post.isPublished ? 'ÈùûÂÖ¨Èñã' : 'ÂÖ¨Èñã'}
                        </button>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {new Date(post.publishedAt).toLocaleDateString('ja-JP')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex flex-wrap gap-1">
                        {post.tags?.map((tag, index) => (
                          <span key={index} className="inline-flex px-2 py-1 text-xs text-gray-600 bg-gray-100 rounded">
                            {tag}
                          </span>
                        ))}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end space-x-2">
                        <Link
                          href={`/blog/${post.slug?.current}`}
                          target="_blank"
                          className="text-moss-green hover:text-moss-green/80"
                        >
                          Á¢∫Ë™ç
                        </Link>
                        <Link
                          href={`/admin/blog/${post._id}/edit`}
                          className="text-blue-600 hover:text-blue-500"
                        >
                          Á∑®ÈõÜ
                        </Link>
                        <button
                          className="text-red-600 hover:text-red-500"
                          onClick={() => handleDelete(post._id)}
                        >
                          ÂâäÈô§
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        {filteredPosts.length === 0 && (
          <div className="text-center py-12">
            <div className="text-gray-400 text-6xl mb-4">üìù</div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">Ë®ò‰∫ã„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
            <p className="text-gray-500 mb-6">
              {filter === 'all' ? '„Åæ„Å†Ë®ò‰∫ã„ÅåÊäïÁ®ø„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' : `${filter}„ÅÆË®ò‰∫ã„Åå„ÅÇ„Çä„Åæ„Åõ„Çì`}
            </p>
            <Link
              href="/admin/blog/new"
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-moss-green hover:bg-moss-green/90"
            >
              Êñ∞„Åó„ÅÑË®ò‰∫ã„Çí‰ΩúÊàê
            </Link>
          </div>
        )}
      </div>

      {/* „ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-2">üìù Êñ∞Ë®ò‰∫ã‰ΩúÊàê</h3>
          <p className="text-gray-600 text-sm mb-4">„Éñ„É≠„Ç∞Ë®ò‰∫ã„ÇÑ„Éã„É•„Éº„Çπ„ÇíÊäïÁ®ø</p>
          <Link
            href="/admin/blog/new"
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-moss-green hover:bg-moss-green/90 w-full justify-center"
          >
            Ë®ò‰∫ã„Çí‰ΩúÊàê
          </Link>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-2">üè∑Ô∏è „Ç´„ÉÜ„Ç¥„É™ÁÆ°ÁêÜ</h3>
          <p className="text-gray-600 text-sm mb-4">Ë®ò‰∫ã„Ç´„ÉÜ„Ç¥„É™„ÅÆË®≠ÂÆö</p>
          <Link
            href="/admin/blog/categories"
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
          >
            „Ç´„ÉÜ„Ç¥„É™Ë®≠ÂÆö
          </Link>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-2">üìä Ë®ò‰∫ãÁµ±Ë®à</h3>
          <p className="text-gray-600 text-sm mb-4">„Ç¢„ÇØ„Çª„ÇπÊï∞„ÇÑ‰∫∫Ê∞óË®ò‰∫ã</p>
          <Link
            href="/admin/blog/analytics"
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700"
          >
            Áµ±Ë®à„ÇíË¶ã„Çã
          </Link>
        </div>
      </div>
    </div>
  );
}